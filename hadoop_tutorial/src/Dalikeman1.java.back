import java.io.IOException;
import java.util.*;
        
import org.apache.hadoop.fs.Path;
import org.apache.hadoop.conf.*;
import org.apache.hadoop.io.*;
import org.apache.hadoop.mapreduce.*;
import org.apache.hadoop.mapreduce.lib.input.FileInputFormat;
import org.apache.hadoop.mapreduce.lib.input.TextInputFormat;
import org.apache.hadoop.mapreduce.lib.output.FileOutputFormat;
import org.apache.hadoop.mapreduce.lib.output.TextOutputFormat;
        
public class Dalikeman1 {
        
 public static class Map extends Mapper<LongWritable, Text, Text, IntWritable> {
    private final static IntWritable one = new IntWritable(1);
    
        
    public void map(LongWritable key, Text value, Context context) throws IOException, InterruptedException {
        String line = value.toString(); //先將 ini 檔讀入,第一欄為 label 當作 key, 此後為value
        StringTokenizer tokenizer = new StringTokenizer(line,",");
        String label = new Text();
        int count=0; //控制欄位
        String line1="";
        String prefix = "";
        while (tokenizer.hasMoreTokens()) {
            String token = tokenizer.nextToken();
            count += 1;
            if (count==1){ 
                label = tokenizer.nextToken();
            }
            if (count>1){
                line1 += prefix + token;
                prefix = ",";
            }
        }
        context.write(new Text(label), new Text(line1));
    }
 } 
        
 public static class Reduce extends Reducer<Text, Text, Text, Text> {

    public void reduce(Text key, Iterable<Text> values, Context context) 
      throws IOException, InterruptedException {
        int sum = 0;
        for (Text val : values) {
            sum += val.get();
        }
        context.write(key, new Text(sum));
    }
 }
        


 public static class SortMap extends Mapper<LongWritable, Text, IntWritable, Text> {
   

    public void map(LongWritable key, Text value, Context context) throws IOException, InterruptedException {
        String line = value.toString();
        StringTokenizer tokenizer = new StringTokenizer(line);
            String token1 = tokenizer.nextToken();
            String token2 = tokenizer.nextToken();
            context.write(new IntWritable(Integer.parseInt(token2)), new Text(token1));//token 1 與 token 2 顛倒
        
    }
 }

 public static class SortReduce extends Reducer<IntWritable, Text, IntWritable, Text> {

    public void reduce(IntWritable key, Iterable<Text> values, Context context)
      throws IOException, InterruptedException {
        for (Text val : values) {
            context.write(key, val);
        }
    }
 }






 public static void main(String[] args) throws Exception {
    Configuration conf = new Configuration();
        
    Job job = new Job(conf, "dalikmean1t");   
    job.setOutputKeyClass(Text.class);
    job.setOutputValueClass(IntWritable.class);
    job.setMapperClass(Map.class);
    job.setReducerClass(Reduce.class);
    job.setJarByClass(WordCount.class);
    job.setInputFormatClass(TextInputFormat.class);
    job.setOutputFormatClass(TextOutputFormat.class);
    FileInputFormat.addInputPath(job, new Path(args[0]));
    FileOutputFormat.setOutputPath(job, new Path(args[1]));
        
    job.waitForCompletion(true);

    Configuration conf2 = new Configuration();

    Job job2 = new Job(conf, "sort_count");
    job2.setOutputKeyClass(IntWritable.class);
    job2.setOutputValueClass(Text.class);
    job2.setMapperClass(SortMap.class);
    job2.setReducerClass(SortReduce.class);
    job2.setJarByClass(WordCount.class);
    job2.setInputFormatClass(TextInputFormat.class);
    job2.setOutputFormatClass(TextOutputFormat.class);
    FileInputFormat.addInputPath(job2, new Path(args[1]));
    FileOutputFormat.setOutputPath(job2, new Path(args[2]));
    job2.waitForCompletion(true);

 }
        
}
